{"ast":null,"code":"import { DOCUMENT, CommonModule } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, HostListener, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\nimport * as ɵngcc0 from '@angular/core';\nclass ClipboardService {\n  constructor(document, window) {\n    this.document = document;\n    this.window = window;\n    this.copySubject = new Subject();\n    this.copyResponse$ = this.copySubject.asObservable();\n    this.config = {};\n  }\n  configure(config) {\n    this.config = config;\n  }\n  copy(content) {\n    if (!this.isSupported || !content) {\n      return this.pushCopyResponse({\n        isSuccess: false,\n        content\n      });\n    }\n    const copyResult = this.copyFromContent(content);\n    if (copyResult) {\n      return this.pushCopyResponse({\n        content,\n        isSuccess: copyResult\n      });\n    }\n    return this.pushCopyResponse({\n      isSuccess: false,\n      content\n    });\n  }\n  get isSupported() {\n    return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\n  }\n  isTargetValid(element) {\n    if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\n      if (element.hasAttribute('disabled')) {\n        throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n      }\n      return true;\n    }\n    throw new Error('Target should be input or textarea');\n  }\n  /**\r\n   * Attempts to copy from an input `targetElm`\r\n   */\n  copyFromInputElement(targetElm, isFocus = true) {\n    try {\n      this.selectTarget(targetElm);\n      const re = this.copyText();\n      this.clearSelection(isFocus ? targetElm : undefined, this.window);\n      return re && this.isCopySuccessInIE11();\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\r\n   * This is a hack for IE11 to return `true` even if copy fails.\r\n   */\n  isCopySuccessInIE11() {\n    const clipboardData = this.window['clipboardData'];\n    if (clipboardData && clipboardData.getData) {\n      if (!clipboardData.getData('Text')) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Creates a fake textarea element, sets its value from `text` property,\r\n   * and makes a selection on it.\r\n   */\n  copyFromContent(content, container = this.document.body) {\n    // check if the temp textarea still belongs to the current container.\n    // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\n    if (this.tempTextArea && !container.contains(this.tempTextArea)) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n    if (!this.tempTextArea) {\n      this.tempTextArea = this.createTempTextArea(this.document, this.window);\n      try {\n        container.appendChild(this.tempTextArea);\n      } catch (error) {\n        throw new Error('Container should be a Dom element');\n      }\n    }\n    this.tempTextArea.value = content;\n    const toReturn = this.copyFromInputElement(this.tempTextArea, false);\n    if (this.config.cleanUpAfterCopy) {\n      this.destroy(this.tempTextArea.parentElement || undefined);\n    }\n    return toReturn;\n  }\n  /**\r\n   * Remove temporary textarea if any exists.\r\n   */\n  destroy(container = this.document.body) {\n    if (this.tempTextArea) {\n      container.removeChild(this.tempTextArea);\n      // removeChild doesn't remove the reference from memory\n      this.tempTextArea = undefined;\n    }\n  }\n  /**\r\n   * Select the target html input element.\r\n   */\n  selectTarget(inputElement) {\n    inputElement.select();\n    inputElement.setSelectionRange(0, inputElement.value.length);\n    return inputElement.value.length;\n  }\n  copyText() {\n    return this.document.execCommand('copy');\n  }\n  /**\r\n   * Moves focus away from `target` and back to the trigger, removes current selection.\r\n   */\n  clearSelection(inputElement, window) {\n    var _a;\n    inputElement && inputElement.focus();\n    (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n  }\n  /**\r\n   * Creates a fake textarea for copy command.\r\n   */\n  createTempTextArea(doc, window) {\n    const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\n    let ta;\n    ta = doc.createElement('textarea');\n    // Prevent zooming on iOS\n    ta.style.fontSize = '12pt';\n    // Reset box model\n    ta.style.border = '0';\n    ta.style.padding = '0';\n    ta.style.margin = '0';\n    // Move element out of screen horizontally\n    ta.style.position = 'absolute';\n    ta.style[isRTL ? 'right' : 'left'] = '-9999px';\n    // Move element to the same position vertically\n    const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\n    ta.style.top = yPosition + 'px';\n    ta.setAttribute('readonly', '');\n    return ta;\n  }\n  /**\r\n   * Pushes copy operation response to copySubject, to provide global access\r\n   * to the response.\r\n   */\n  pushCopyResponse(response) {\n    this.copySubject.next(response);\n  }\n  /**\r\n   * @deprecated use pushCopyResponse instead.\r\n   */\n  pushCopyReponse(response) {\n    this.pushCopyResponse(response);\n  }\n}\nClipboardService.ɵfac = function ClipboardService_Factory(t) {\n  return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8));\n};\nClipboardService.ɵprov = ɵɵdefineInjectable({\n  factory: function ClipboardService_Factory() {\n    return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8));\n  },\n  token: ClipboardService,\n  providedIn: \"root\"\n});\nClipboardService.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [WINDOW]\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\nclass ClipboardDirective {\n  constructor(clipboardSrv) {\n    this.clipboardSrv = clipboardSrv;\n    this.cbOnSuccess = new EventEmitter();\n    this.cbOnError = new EventEmitter();\n  }\n  // tslint:disable-next-line:no-empty\n  ngOnInit() {}\n  ngOnDestroy() {\n    this.clipboardSrv.destroy(this.container);\n  }\n  onClick(event) {\n    if (!this.clipboardSrv.isSupported) {\n      this.handleResult(false, undefined, event);\n    } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\n      this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\n    } else if (this.cbContent) {\n      this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\n    }\n  }\n  /**\r\n   * Fires an event based on the copy operation result.\r\n   * @param succeeded\r\n   */\n  handleResult(succeeded, copiedContent, event) {\n    let response = {\n      isSuccess: succeeded,\n      event\n    };\n    if (succeeded) {\n      response = Object.assign(response, {\n        content: copiedContent,\n        successMessage: this.cbSuccessMsg\n      });\n      this.cbOnSuccess.emit(response);\n    } else {\n      this.cbOnError.emit(response);\n    }\n    this.clipboardSrv.pushCopyResponse(response);\n  }\n}\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) {\n  return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService));\n};\nClipboardDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardDirective,\n  selectors: [[\"\", \"ngxClipboard\", \"\"]],\n  hostBindings: function ClipboardDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) {\n        return ctx.onClick($event.target);\n      });\n    }\n  },\n  inputs: {\n    targetElm: [\"ngxClipboard\", \"targetElm\"],\n    container: \"container\",\n    cbContent: \"cbContent\",\n    cbSuccessMsg: \"cbSuccessMsg\"\n  },\n  outputs: {\n    cbOnSuccess: \"cbOnSuccess\",\n    cbOnError: \"cbOnError\"\n  }\n});\nClipboardDirective.ctorParameters = () => [{\n  type: ClipboardService\n}];\nClipboardDirective.propDecorators = {\n  targetElm: [{\n    type: Input,\n    args: ['ngxClipboard']\n  }],\n  container: [{\n    type: Input\n  }],\n  cbContent: [{\n    type: Input\n  }],\n  cbSuccessMsg: [{\n    type: Input\n  }],\n  cbOnSuccess: [{\n    type: Output\n  }],\n  cbOnError: [{\n    type: Output\n  }],\n  onClick: [{\n    type: HostListener,\n    args: ['click', ['$event.target']]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboard]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }];\n  }, {\n    cbOnSuccess: [{\n      type: Output\n    }],\n    cbOnError: [{\n      type: Output\n    }],\n    onClick: [{\n      type: HostListener,\n      args: ['click', ['$event.target']]\n    }],\n    targetElm: [{\n      type: Input,\n      args: ['ngxClipboard']\n    }],\n    container: [{\n      type: Input\n    }],\n    cbContent: [{\n      type: Input\n    }],\n    cbSuccessMsg: [{\n      type: Input\n    }]\n  });\n})();\nclass ClipboardIfSupportedDirective {\n  constructor(_clipboardService, _viewContainerRef, _templateRef) {\n    this._clipboardService = _clipboardService;\n    this._viewContainerRef = _viewContainerRef;\n    this._templateRef = _templateRef;\n  }\n  ngOnInit() {\n    if (this._clipboardService.isSupported) {\n      this._viewContainerRef.createEmbeddedView(this._templateRef);\n    }\n  }\n}\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) {\n  return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n};\nClipboardIfSupportedDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: ClipboardIfSupportedDirective,\n  selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]]\n});\nClipboardIfSupportedDirective.ctorParameters = () => [{\n  type: ClipboardService\n}, {\n  type: ViewContainerRef\n}, {\n  type: TemplateRef\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[ngxClipboardIfSupported]'\n    }]\n  }], function () {\n    return [{\n      type: ClipboardService\n    }, {\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: ɵngcc0.TemplateRef\n    }];\n  }, null);\n})();\nclass ClipboardModule {}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) {\n  return new (t || ClipboardModule)();\n};\nClipboardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ClipboardModule\n});\nClipboardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n      exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, {\n    declarations: function () {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClipboardDirective, ClipboardIfSupportedDirective];\n    }\n  });\n})();\n\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };","map":{"version":3,"names":["DOCUMENT","CommonModule","ɵɵdefineInjectable","ɵɵinject","Injectable","Inject","Optional","EventEmitter","Directive","Input","Output","HostListener","ViewContainerRef","TemplateRef","NgModule","WINDOW","Subject","ɵngcc0","ClipboardService","constructor","document","window","copySubject","copyResponse$","asObservable","config","configure","copy","content","isSupported","pushCopyResponse","isSuccess","copyResult","copyFromContent","queryCommandSupported","isTargetValid","element","HTMLInputElement","HTMLTextAreaElement","hasAttribute","Error","copyFromInputElement","targetElm","isFocus","selectTarget","re","copyText","clearSelection","undefined","isCopySuccessInIE11","error","clipboardData","getData","container","body","tempTextArea","contains","destroy","parentElement","createTempTextArea","appendChild","value","toReturn","cleanUpAfterCopy","removeChild","inputElement","select","setSelectionRange","length","execCommand","_a","focus","getSelection","removeAllRanges","doc","isRTL","documentElement","getAttribute","ta","createElement","style","fontSize","border","padding","margin","position","yPosition","pageYOffset","scrollTop","top","setAttribute","response","next","pushCopyReponse","ɵfac","ClipboardService_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","decorators","args","ngDevMode","ɵsetClassMetadata","ClipboardDirective","clipboardSrv","cbOnSuccess","cbOnError","ngOnInit","ngOnDestroy","onClick","event","handleResult","cbContent","succeeded","copiedContent","Object","assign","successMessage","cbSuccessMsg","emit","ClipboardDirective_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","hostBindings","ClipboardDirective_HostBindings","rf","ctx","ɵɵlistener","ClipboardDirective_click_HostBindingHandler","$event","target","inputs","outputs","propDecorators","selector","ClipboardIfSupportedDirective","_clipboardService","_viewContainerRef","_templateRef","createEmbeddedView","ClipboardIfSupportedDirective_Factory","ClipboardModule","ClipboardModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/MikolajMakowski/source/repos/Mik1mak/Timetable-A/Timetable.App/node_modules/ngx-clipboard/__ivy_ngcc__/fesm2015/ngx-clipboard.js"],"sourcesContent":["import { DOCUMENT, CommonModule } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, Optional, EventEmitter, Directive, Input, Output, HostListener, ViewContainerRef, TemplateRef, NgModule } from '@angular/core';\nimport { WINDOW } from 'ngx-window-token';\nimport { Subject } from 'rxjs';\n\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nclass ClipboardService {\r\n    constructor(document, window) {\r\n        this.document = document;\r\n        this.window = window;\r\n        this.copySubject = new Subject();\r\n        this.copyResponse$ = this.copySubject.asObservable();\r\n        this.config = {};\r\n    }\r\n    configure(config) {\r\n        this.config = config;\r\n    }\r\n    copy(content) {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n    get isSupported() {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n    isTargetValid(element) {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    copyFromInputElement(targetElm, isFocus = true) {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    isCopySuccessInIE11() {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    copyFromContent(content, container = this.document.body) {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            }\r\n            catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        return toReturn;\r\n    }\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    destroy(container = this.document.body) {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    selectTarget(inputElement) {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n    copyText() {\r\n        return this.document.execCommand('copy');\r\n    }\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    clearSelection(inputElement, window) {\r\n        var _a;\r\n        inputElement && inputElement.focus();\r\n        (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\r\n    }\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    createTempTextArea(doc, window) {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    pushCopyResponse(response) {\r\n        this.copySubject.next(response);\r\n    }\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    pushCopyReponse(response) {\r\n        this.pushCopyResponse(response);\r\n    }\r\n}\nClipboardService.ɵfac = function ClipboardService_Factory(t) { return new (t || ClipboardService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(WINDOW, 8)); };\r\nClipboardService.ɵprov = ɵɵdefineInjectable({ factory: function ClipboardService_Factory() { return new ClipboardService(ɵɵinject(DOCUMENT), ɵɵinject(WINDOW, 8)); }, token: ClipboardService, providedIn: \"root\" });\r\nClipboardService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [WINDOW,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardService, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [WINDOW]\n            }] }]; }, null); })();\n\nclass ClipboardDirective {\r\n    constructor(clipboardSrv) {\r\n        this.clipboardSrv = clipboardSrv;\r\n        this.cbOnSuccess = new EventEmitter();\r\n        this.cbOnError = new EventEmitter();\r\n    }\r\n    // tslint:disable-next-line:no-empty\r\n    ngOnInit() { }\r\n    ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n    onClick(event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        }\r\n        else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        }\r\n        else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    handleResult(succeeded, copiedContent, event) {\r\n        let response = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        }\r\n        else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n}\nClipboardDirective.ɵfac = function ClipboardDirective_Factory(t) { return new (t || ClipboardDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService)); };\nClipboardDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ClipboardDirective, selectors: [[\"\", \"ngxClipboard\", \"\"]], hostBindings: function ClipboardDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClipboardDirective_click_HostBindingHandler($event) { return ctx.onClick($event.target); });\n    } }, inputs: { targetElm: [\"ngxClipboard\", \"targetElm\"], container: \"container\", cbContent: \"cbContent\", cbSuccessMsg: \"cbSuccessMsg\" }, outputs: { cbOnSuccess: \"cbOnSuccess\", cbOnError: \"cbOnError\" } });\r\nClipboardDirective.ctorParameters = () => [\r\n    { type: ClipboardService }\r\n];\r\nClipboardDirective.propDecorators = {\r\n    targetElm: [{ type: Input, args: ['ngxClipboard',] }],\r\n    container: [{ type: Input }],\r\n    cbContent: [{ type: Input }],\r\n    cbSuccessMsg: [{ type: Input }],\r\n    cbOnSuccess: [{ type: Output }],\r\n    cbOnError: [{ type: Output }],\r\n    onClick: [{ type: HostListener, args: ['click', ['$event.target'],] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxClipboard]'\n            }]\n    }], function () { return [{ type: ClipboardService }]; }, { cbOnSuccess: [{\n            type: Output\n        }], cbOnError: [{\n            type: Output\n        }], onClick: [{\n            type: HostListener,\n            args: ['click', ['$event.target']]\n        }], targetElm: [{\n            type: Input,\n            args: ['ngxClipboard']\n        }], container: [{\n            type: Input\n        }], cbContent: [{\n            type: Input\n        }], cbSuccessMsg: [{\n            type: Input\n        }] }); })();\n\nclass ClipboardIfSupportedDirective {\r\n    constructor(_clipboardService, _viewContainerRef, _templateRef) {\r\n        this._clipboardService = _clipboardService;\r\n        this._viewContainerRef = _viewContainerRef;\r\n        this._templateRef = _templateRef;\r\n    }\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\nClipboardIfSupportedDirective.ɵfac = function ClipboardIfSupportedDirective_Factory(t) { return new (t || ClipboardIfSupportedDirective)(ɵngcc0.ɵɵdirectiveInject(ClipboardService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nClipboardIfSupportedDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: ClipboardIfSupportedDirective, selectors: [[\"\", \"ngxClipboardIfSupported\", \"\"]] });\r\nClipboardIfSupportedDirective.ctorParameters = () => [\r\n    { type: ClipboardService },\r\n    { type: ViewContainerRef },\r\n    { type: TemplateRef }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardIfSupportedDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[ngxClipboardIfSupported]'\n            }]\n    }], function () { return [{ type: ClipboardService }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.TemplateRef }]; }, null); })();\n\nclass ClipboardModule {\r\n}\nClipboardModule.ɵfac = function ClipboardModule_Factory(t) { return new (t || ClipboardModule)(); };\nClipboardModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ClipboardModule });\nClipboardModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClipboardModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule],\n                declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\n                exports: [ClipboardDirective, ClipboardIfSupportedDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClipboardModule, { declarations: function () { return [ClipboardDirective, ClipboardIfSupportedDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [ClipboardDirective, ClipboardIfSupportedDirective]; } }); })();\n\n/*\r\n * Public API Surface of ngx-clipboard\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ClipboardDirective, ClipboardIfSupportedDirective, ClipboardModule, ClipboardService };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}