@inject TimetableSender sender
@inject TimetableGetter getter

@*
formularz:
	format źródła ICS | Optivum
		>ile cykli, url, plik
		>url
	warstwa | nowy plan
		>link do logowania planu
		>
output:
	>data, godz, link
*@

<h3>Importer</h3>


<EditForm Model="@form" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

	 <p>
        <label>
            Parser:
            <InputSelect @bind-Value="form.ParserId">
               @foreach (var item in parsers)
               {
                <option value="@item.Key">@item.Value.DisplayName</option>   
               }
                
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Source:
            <InputSelect @bind-Value="form.SelectedSource">
                @if(parsers[form.ParserId].ParseFromUrl)
                {
                    <option value="url">From URL</option>
                }
                @if(parsers[form.ParserId].ParseFromFile)
                {
                    <option value="file">From File</option>
                }
            </InputSelect>
        </label>
    </p>
    @if (form.SelectedSource == "url")
    {
        <p>
            <label>
                Source URL:
                <InputText id="source" @bind-Value="form.Source" />
            </label>
        </p>
    }
    @if(form.SelectedSource == "file")
    {
    <p>
        <label>
            Source File:
            <InputFile OnChange="@LoadFile"/>
        </label>
    </p>    
    }
    @if(parsers[form.ParserId].AskAboutCycles)
    {
    <p>
        <label>
            Cycles:
            <InputNumber id="cycles" @bind-Value="form.Cycles" />
        </label>
    </p>    
    }
    <p>
        <label>
            Mode:
            <InputSelect @bind-Value="form.AsNew">
                <option value="true">Save as new Timetable</option>
                @*<option value="false">Save as Timetable Layer</option>   *@
            </InputSelect>
        </label>
    </p>
    @if(!form.AsNew)
    {
    <p>
        <label>
            Timetable Edit URL:
            <InputText @bind-Value="form.EditUrl"/>
        </label>
    </p>    
    }

    <button type="submit">Submit</button>
</EditForm>

@code {
    private ImporterForm form = new();
    private bool loading = false;
    private Dictionary<string, ITimetableParserInfo> parsers = new()
    {
        { nameof(IcsParserInfo), new IcsParserInfo() },
        { nameof(OptivumParserInfo), new OptivumParserInfo() },
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        form.SourceFile = e.File;
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            Timetable? timetable = null;

            switch(form.SelectedSource)
            {
                case "url":
                    if (string.IsNullOrEmpty(form.Source))
                        return;
                    timetable = await getter.GetFromUri(parsers[form.ParserId], form.Source);
                    break;
                case "file":
                    if (form.SourceFile is null)
                        return;
                    using(Stream stream = form.SourceFile.OpenReadStream())
                    {
                        var parser = await parsers[form.ParserId].GetParserFromStreamAsync(stream);
                        timetable = parser.GetTimetable();        
                    }
                    break;
                default:
                    return;
            }

            timetable.Cycles = form.Cycles;
            timetable.Name = timetable.Name.SliceIfTooLong(32);
            timetable.TrimLessonsToCycles();

            await sender.CreateTimetable(timetable);

            try
            {
                var response = await sender.CreateAsync(timetable);

                string output = $"https://timetableappstatic.z22.web.core.windows.net/login/?id={response.Id}" +
                    $"&key={response.EditKey}" +
                    $"&returnUrl=%2F%3F{string.Join("%26", sender.AddedGroupsId.Select(id => $"g%3D{id}"))}";

                Console.WriteLine(output);
            }
            catch
            {
                await sender.DeleteTimetableIfWasCreated();
                Console.WriteLine("cos nie tak przy wysylaniu");
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            loading = false;        
        }
    }
}
