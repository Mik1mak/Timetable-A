@page "/"

@inject TimetableSender sender
@inject TimetableGetter getter
@inject IConfiguration config

@*
formularz:
	format źródła ICS | Optivum
		>ile cykli, url, plik
		>url
	warstwa | nowy plan
		>link do logowania planu
		>
output:
	>data, godz, link
*@

<PageTitle>Timetable Import</PageTitle>

<h3>Importer</h3>

<EditForm Model="@form" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

	 <p>
        <label>
            Source Type:
            <InputSelect @bind-Value="form.ParserId">
               @foreach (var item in sourceType)
               {
                    <option value="@item.Key">@item.Value.DisplayName</option>   
               }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Source:
            <InputSelect @bind-Value="form.SelectedSource">
                @if(sourceType[form.ParserId].ParseFromUrl)
                {
                    <option value="url">From URL</option>
                }
                @if(sourceType[form.ParserId].ParseFromFile)
                {
                    <option value="file">From File</option>
                }
            </InputSelect>
        </label>
    </p>
    @if (form.SelectedSource == "url")
    {
        <p>
            <label>
                Source URL:
                <InputText id="source" @bind-Value="form.Source" />
            </label>
        </p>
    }
    @if(form.SelectedSource == "file")
    {
    <p>
        <label>
            Source File:
            <InputFile OnChange="@LoadFile"/>
        </label>
    </p>    
    }
    @if(sourceType[form.ParserId].AskAboutCycles)
    {
    <p>
        <label>
            Cycles:
            <InputNumber id="cycles" @bind-Value="form.Cycles" />
        </label>
    </p>    
    }
    <p>
        <label>
            Mode:
            <InputSelect @bind-Value="form.AsNew">
                <option value="true">Save as new Timetable</option>
                <option value="false">Save as Timetable Layers</option>   
            </InputSelect>
        </label>
    </p>
    @if(!form.AsNew)
    {
    <p>
        <label>
            Target Timetable Edit URL:
            <InputText @bind-Value="form.EditUrl"/>
        </label>
    </p>    
    }

    <button type="submit" class="btn btn-primary" disabled="@loading">
        @if(loading)
        {
            <span class="spinner-border spinner-border-sm" role="status"></span>
            <span>Working...</span>
        }
        else
        {
            <span>Submit</span>
        }
    </button>
</EditForm>

@if(log.Any())
{
<div class="card mt-2" >
  <ul class="list-group list-group-flush">
      @foreach(var record in log)
      {
        <li class="list-group-item">
            <a href="@record.Item1" target="_blank">@record.Item2</a>  @record.Item3.ToString()
        </li> 
      }
  </ul>
</div>    
}

@code {

    private ImporterForm form = new();
    private bool loading = false;
    private Dictionary<string, ITimetableSourceType> sourceType = new()
    {
        { nameof(IcsSourceType), new IcsSourceType() },
        { nameof(OptivumSourceType), new OptivumSourceType() },
        { nameof(ApiSourceType), new ApiSourceType() },
    };
    private List<(string, string, DateTime)> log = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    private void LoadFile(InputFileChangeEventArgs e)
    {
        form.SourceFile = e.File;
    }

    private async void HandleValidSubmit()
    {
        if (loading)
            return;

        loading = true;
        try
        {
            Timetable? timetable = null;

            switch(form.SelectedSource)
            {
                case "url":
                    if (string.IsNullOrEmpty(form.Source))
                        return;
                    timetable = await getter.GetFromUri(sourceType[form.ParserId], form.Source);
                    break;
                case "file":
                    if (form.SourceFile is null)
                        return;
                    using(Stream stream = form.SourceFile.OpenReadStream())
                    {
                        ITimetableFactory src = sourceType[form.ParserId].SetSource(stream);
                        timetable = await src.GetTimetable();
                    }
                    break;
                default:
                    return;
            }

            timetable.Cycles = form.Cycles;
            timetable.Name = timetable.Name.SliceIfTooLong(32);
            timetable.TrimLessonsToCycles();

            if(form.AsNew)
                await sender.CreateTimetable(timetable);
            else
                await sender.LoginToAccount(form.EditUrl.GetLoginInfo());

            try
            {
                AuthenticateResponse response = await sender.Send(timetable);
                string output = response.GetHref(config["TargetUrl"], sender.AddedGroupsId);
                log.Add((output, response.Name, DateTime.Now));
                StateHasChanged();
                Console.WriteLine(output);
            }
            catch
            {
                await sender.DeleteTimetableIfWasCreated();
                Console.WriteLine("Nastapil zgrzyt");
            }
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }
}
